version: '3.8'
services:

    # zipkin:
    #     build:
    #         context: ./
    #         dockerfile: ./dockerfiles/zipkin.dockerfile
    nmdm_worker:
        build:
            context: ./
            dockerfile: ./dockerfiles/nmdm.dockerfile
            args:
                - IASON_REGISTRY=${IASON_REGISTRY}
        env_file:
            - ../env/docker_login.env

        container_name: nmdm-worker-container
        restart: unless-stopped
        command: ["dotnet", "bin/nmdm-worker.dll"]

    nmdm_client:
        build:
            context: ./
            dockerfile: ./dockerfiles/nmdm.dockerfile
            args:
                - IASON_REGISTRY=${IASON_REGISTRY}
        env_file:
            - ../env/docker_login.env
        container_name: nmdm-container
        ports:
          - 4180:80
        restart: unless-stopped

    #Grabing the containers metrics

    cadvisor:
        image: gcr.io/cadvisor/cadvisor:latest
        container_name: cadvisor-container
        ports:
        - 8080:8080
        volumes:
        - /var/run:/var/run:rw
        - /var/lib/docker/:/var/lib/docker:ro
        - /sys:/sys:ro
        - /:/rootfs:ro
        depends_on:
        - nmdm_worker

    # Grabing the host metrics
    node:
        build:
            context: ./
            dockerfile: ./dockerfiles/node_exporter.dockerfile
        hostname: node-exporter
        container_name: node-exporter-container
        restart: unless-stopped
        network_mode: host
        pid: host
        volumes:
        # - '/:/host:ro,rslave'
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        ports:
            - ${NODE_SERVER_PORT-9100}:${NODE_SERVER_PORT-9100}
        command:
            # - '--path.rootfs=/host'
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        # keep the container alive
    grafana:
        build:
            context: ./
            dockerfile: ./dockerfiles/grafana.dockerfile
        container_name: grafana-container
        restart: unless-stopped
        hostname: grafana-server
        volumes:
        # https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/#configure-grafana-with-docker-secrets
          - ../services/grafana/provisioning:/etc/grafana/provisioning
        #   saving the grafana data to a volume
          - grafana-data:/var/lib/grafana
        env_file:
            - ../env/grafana.env
        environment:
            - PROMETHEUS_HOSTNAME=http://${PROMETHEUS_HOSTNAME-prometheus-server}
            - PROMETHEUS_SERVER_PORT=${PROMETHEUS_SERVER_PORT-9090}
        ports:
            - ${GRAFANA_SERVER_PORT-3000}:${GRAFANA_SERVER_PORT-3000}
        networks:
            - monitoring-network
        depends_on:
            prometheus:
                condition: service_healthy

    prometheus:
        build:
            context: ./
            dockerfile: ./dockerfiles/prometheus.dockerfile
        # This is the "localhost" for the container
        hostname: ${PROMETHEUS_HOSTNAME-prometheus-server}
        container_name: prometheus-container
        restart: unless-stopped
        extra_hosts:
            - "host-gateway: ${HOST_IP-172.17.0.1}"
        # http://prometheus-server:9090
        volumes:
            - ../services/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
            - ../services/prometheus/alert.rules:/etc/prometheus/alert.rules
            # This is managed by docker - in theory easier to migrate
            - prometheus_data:/prometheus
        # TODO add persistent store for prometheus data
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
        ports:
            # Host:Container
            - ${PROMETHEUS_SERVER_PORT-9090}:9090
            # - ${NODE_SERVER_PORT-9100}:9100
            # - ${PROMETHEUS_ALERTMANAGER_PORT-9093}:9093
            # - ${GRAFANA_SERVER_PORT-3000}:3000
            # - ${NMDM_SERVER_PORT-80}:80

        networks:
            - monitoring-network
        healthcheck:
            # test: ["CMD-SHELL", "wget http://localhost:${PROMETHEUS_SERVER_PORT-9090}/-/ready || exit 1"]
            test: ["CMD-SHELL", "wget --spider --quiet --tries=1 --timeout=10 http://localhost:${PROMETHEUS_SERVER_PORT-9090}/-/ready || exit 1"]
            interval: 10s
            timeout: 15s
            retries: 5
            start_period: 40s

        # depends_on:
        #     node:
        #         condition: service_healthy


volumes:
    prometheus_data:
        name: ${PROMETHEUS_VOLUME_NAME-prometheus_data_volume_name}
        labels:
            name: ${PROMETHEUS_VOLUME_LABEL_NAME-prometheus_data_volume_label_name}
    grafana-data:
        name: ${GRAFANA_VOLUME_NAME-grafana_data_volume_name}
        labels:
            name: ${GRAFANA_VOLUME_LABEL_NAME-grafana_data_volume_label_name}

networks:
    monitoring-network:
        driver: bridge
